name: Release New Version

on:
  push:
    tags:
      - 'v*' # Trigger on new tags prefixed with 'v'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
      branch:
        description: 'Branch to use for release'
        required: false
        default: '' # Default is the branch triggering the workflow
      draft:
        description: 'Whether the release should be a draft'
        required: false
        default: 'false' # Default: Not a draft

env:
  PROJECT_NAME: "GladiusEx" # Change this to your project folder name in the .zip

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Determine branch and repo details
      id: repo-details
      run: |
        # Determine branch
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.branch }}" ]; then
          echo "BRANCH=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
        else
          echo "BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
        fi

        # Use GITHUB_REPOSITORY to determine repo name
        REPO_NAME=$(echo "${GITHUB_REPOSITORY}" | cut -d '/' -f 2)
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag_name }}"
        else
          TAG=${{ github.ref_name }}
        fi
        FINAL_FOLDER="${PROJECT_NAME}"
        echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
        echo "TAG=${TAG}" >> $GITHUB_ENV
        echo "FINAL_FOLDER=${FINAL_FOLDER}" >> $GITHUB_ENV

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{ env.BRANCH }}
        submodules: recursive # Ensures submodules are checked out
        fetch-depth: 0 # Fetch all history and tags

    - name: Update submodules to latest release
      run: |
        git submodule foreach --recursive '
          echo "Processing submodule: $name"
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No tags found for $name; using latest commit."
            git checkout HEAD
          else
            echo "Checking out latest release tag: $LATEST_TAG"
            git checkout $LATEST_TAG
          fi
        '

    - name: Configure Git user
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Prepare release folder
      run: |
        # Create a clean folder for the project
        rm -rf ${{ env.FINAL_FOLDER }}
        mkdir -p ${{ env.FINAL_FOLDER }}

        # Use rsync to copy all repository content into FINAL_FOLDER, while excluding unwanted files
        rsync -av --exclude='.github/' --exclude='*.txt' --exclude='README*' \
              --exclude='.git*' --exclude='.gitmodules' ./ ${{ env.FINAL_FOLDER }}/

        # Check for any nested duplication of FINAL_FOLDER and remove it
        if [ -d "${{ env.FINAL_FOLDER }}/${{ env.FINAL_FOLDER }}" ]; then
          echo "Removing nested duplicate folder..."
          rm -rf ${{ env.FINAL_FOLDER }}/${{ env.FINAL_FOLDER }}
        fi

    - name: Create a zip file with a clean structure
      run: |
        # Create a release folder and move FINAL_FOLDER contents into PROJECT_NAME
        mkdir -p release/${{ env.PROJECT_NAME }}
        mv ${{ env.FINAL_FOLDER }}/* release/${{ env.PROJECT_NAME }}/
        rm -rf ${{ env.FINAL_FOLDER }}

        # Create the zip from the release folder, keeping the desired structure
        cd release
        zip -r "${{ env.PROJECT_NAME }}-${{ env.TAG }}.zip" "${{ env.PROJECT_NAME }}"
        mv "${{ env.PROJECT_NAME }}-${{ env.TAG }}.zip" ../

        # Cleanup the release folder after zipping
        cd ..
        rm -rf release


    - name: Generate release notes file
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the last non-draft release tag
        LAST_RELEASE=$(gh release list --exclude-drafts --limit 1 --json tagName --jq '.[].tagName')

        if [ -z "$LAST_RELEASE" ]; then
          echo "No previous release found; using initial commit."
          echo -e "Content:\n\nInitial release." > release-notes.txt
        else
          echo "Last release: $LAST_RELEASE"
          echo -e "Content:\n" > release-notes.txt
          git log $LAST_RELEASE..HEAD --pretty=format:"* %s" >> release-notes.txt
        fi

    - name: Verify zip contents
      run: |
        echo "Contents of the zip file:"
        unzip -l "${{ env.PROJECT_NAME }}-${{ env.TAG }}.zip"

    - name: Create GitHub release with zip and notes file
      run: |
        if [ "${{ github.event.inputs.draft }}" == "true" ]; then
          gh release create "${{ env.TAG }}" \
            --title "${{ env.PROJECT_NAME }}-${{ env.TAG }}" \
            --notes-file release-notes.txt \
            --draft \
            "${{ env.PROJECT_NAME }}-${{ env.TAG }}.zip"
        else
          gh release create "${{ env.TAG }}" \
            --title "${{ env.PROJECT_NAME }}-${{ env.TAG }}" \
            --notes-file release-notes.txt \
            "${{ env.PROJECT_NAME }}-${{ env.TAG }}.zip"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify GitHub release
      run: |
        gh release view "${{ env.TAG }}"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}